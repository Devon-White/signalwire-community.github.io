"use strict";(self.webpackChunksignalwire_community_docs=self.webpackChunksignalwire_community_docs||[]).push([[6499],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),X=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=X(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=X(t),d=o,m=p["".concat(l,".").concat(d)]||p[d]||c[d]||r;return t?a.createElement(m,s(s({ref:n},u),{},{components:t})):a.createElement(m,s({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var X=2;X<r;X++)s[X]=t[X];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6624:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>X});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:5},s="Relay.Consumer",i={unversionedId:"php/reference/relay_consumer",id:"php/reference/relay_consumer",title:"Relay.Consumer",description:"A Relay Consumer is a simple PHP class that runs in its own process along side your application to handle calling and messaging events in realtime. Relay Consumers abstract all the setup of connecting to Relay and automatically dispatch workers to handle requests. Consumers will receive requests and delegate them to their own worker thread, allowing you to focus on your business logic without having to worry about multi-threading or blocking, everything just works. Think of Relay Consumers like a background worker system for all your calling and messaging needs.",source:"@site/docs/php/reference/relay_consumer.mdx",sourceDirName:"php/reference",slug:"/php/reference/relay_consumer",permalink:"/docs/php/reference/relay_consumer",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/php/reference/relay_consumer.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"phpSidebar",previous:{title:"Relay.Client",permalink:"/docs/php/reference/relay_client"},next:{title:"Relay.Event",permalink:"/docs/php/reference/relay_event"}},l={},X=[{value:"Creating Consumers",id:"creating-consumers",level:2},{value:"Coroutine &amp; yield keywords",id:"coroutine--yield-keywords",level:2},{value:"Initializing Consumers",id:"initializing-consumers",level:2},{value:"Properties",id:"properties",level:2},{value:"Event Handlers",id:"event-handlers",level:2},{value:"ready",id:"ready",level:3},{value:"onIncomingCall",id:"onincomingcall",level:3},{value:"onTask",id:"ontask",level:3},{value:"onIncomingMessage",id:"onincomingmessage",level:3},{value:"onMessageStateChange",id:"onmessagestatechange",level:3},{value:"Cleaning Up on Exit",id:"cleaning-up-on-exit",level:2},{value:"Running Consumers",id:"running-consumers",level:2},{value:"Shutting Down Consumers",id:"shutting-down-consumers",level:2}],u={toc:X};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"relayconsumer"},"Relay.Consumer"),(0,o.kt)("p",null,"A Relay Consumer is a simple PHP class that runs in its own process along side your application to handle calling and messaging events in realtime. Relay Consumers abstract all the setup of connecting to Relay and automatically dispatch workers to handle requests. Consumers will receive requests and delegate them to their own worker thread, allowing you to focus on your business logic without having to worry about multi-threading or blocking, everything just works. Think of Relay Consumers like a background worker system for all your calling and messaging needs."),(0,o.kt)("h2",{id:"creating-consumers"},"Creating Consumers"),(0,o.kt)("p",null,"A Relay Consumer is a simple object, customized by specifying ",(0,o.kt)("a",{parentName:"p",href:"/docs/php/#contexts"},"contexts")," and event handlers to respond to incoming events."),(0,o.kt)("p",null,"A consumer has 2 required properties: ",(0,o.kt)("inlineCode",{parentName:"p"},"project"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"token"),", and usually requires at least one ",(0,o.kt)("inlineCode",{parentName:"p"},"contexts")," for incoming events. Project and Token are used to authenticate your Consumer to your SignalWire account. Contexts are a list of contexts you want this Consumer to listen for. ",(0,o.kt)("a",{parentName:"p",href:"/docs/php/#contexts"},"Learn more about Contexts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire dirname(__FILE__) . '/vendor/autoload.php';\n\nuse Generator as Coroutine;\n\nclass CustomConsumer extends SignalWire\\Relay\\Consumer {\n  public $project = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n  public $token = 'PTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n  public $contexts = ['default'];\n\n  public function onIncomingCall($call): Coroutine {\n    yield $call->answer();\n    yield $call->playTTS(['text' => 'Welcome to SignalWire!']);\n  }\n}\n\n$consumer = new CustomConsumer();\n$consumer->run();\n")),(0,o.kt)("h2",{id:"coroutine--yield-keywords"},"Coroutine & yield keywords"),(0,o.kt)("p",null,"In the Consumer examples you can see the special keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," and the return type ",(0,o.kt)("inlineCode",{parentName:"p"},"Coroutine")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"onIncomingCall"),' method. These keywords help you write asynchronous code that "seems" synchronous, avoiding the need to nest your code in multiple callbacks.'),(0,o.kt)("p",null,"Since the Relay PHP SDK is built on top of ",(0,o.kt)("a",{parentName:"p",href:"https://reactphp.org/"},"ReactPHP"),", a lot of methods return ",(0,o.kt)("a",{parentName:"p",href:"https://reactphp.org/promise/"},"Promises")," that will be resolved with the result of the asynchronous operations. By flattening out the nested callbacks, you can just ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," the Promises to wait for its value."),(0,o.kt)("p",null,"If you are familiar with Javascript, ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," is similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"async/await")," syntax in JS."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Difference between using and not using yield with a Promise."',title:'"Difference',between:!0,using:!0,and:!0,not:!0,yield:!0,with:!0,a:!0,'Promise."':!0},"<?php\n  public function onIncomingCall($call): Coroutine {\n    // Without using yield\n    $call->answer()->done(function($answerResult) {\n      // .. use $answerResult here..\n    });\n\n    // Using yield\n    $answerResult = yield $call->answer();\n  }\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," within functions with return type ",(0,o.kt)("inlineCode",{parentName:"p"},"Coroutine")," you must force PHP to parse the function as a Generator so, if you don't need any ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," in your code, just set the first line as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n  public function onIncomingCall($call): Coroutine {\n    yield;\n    // ...\n  }\n")),(0,o.kt)("h2",{id:"initializing-consumers"},"Initializing Consumers"),(0,o.kt)("p",null,"You can optionally add an ",(0,o.kt)("inlineCode",{parentName:"p"},"setup")," method if you need to do any initialization work before processing messages. This is useful to do any one-off work that you wouldn't want to do for each and every event, such as setting up logging or connecting to a datastore."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire dirname(__FILE__) . '/vendor/autoload.php';\n\nuse Generator as Coroutine;\n\nclass CustomConsumer extends SignalWire\\Relay\\Consumer {\n  public $project = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n  public $token = 'PTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n  public $contexts = ['default'];\n\n  public function setup() {\n    // Initialize anything you'd like available for all events.\n    // Like logging, database connections, etc.\n  }\n\n  public function onIncomingCall($call): Coroutine {\n    yield $call->answer();\n    yield $call->playTTS(['text' => 'Welcome to SignalWire!']);\n  }\n}\n\n$consumer = new CustomConsumer();\n$consumer->run();\n")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"right"}),(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"right"},(0,o.kt)("inlineCode",{parentName:"td"},"client")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("span",{class:"method-prop-type"},(0,o.kt)("a",{parentName:"td",href:"/docs/php/reference/relay_client"},(0,o.kt)("inlineCode",{parentName:"a"},"Relay.Client")))),(0,o.kt)("td",{parentName:"tr",align:null},"The underlying Relay client object.")))),(0,o.kt)("h2",{id:"event-handlers"},"Event Handlers"),(0,o.kt)("p",null,"Event handlers are where you will write most of your code. They are executed when your consumer receives a matching event for the contexts specified by your Consumer."),(0,o.kt)("div",{class:"method-definitions"}),(0,o.kt)("h3",{id:"ready"},"ready"),(0,o.kt)("p",null,"Executed once your Consumer is connected to Relay and the session has been established."),(0,o.kt)("p",null,"Available In: ",(0,o.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2+-brightgreen.svg"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire dirname(__FILE__) . '/vendor/autoload.php';\n\nuse Generator as Coroutine;\n\nclass CustomConsumer extends SignalWire\\Relay\\Consumer {\n  public $project = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n  public $token = 'PTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n  public $contexts = ['default'];\n\n  public function ready(): Coroutine {\n    $params = [ 'type' => 'phone', 'from' => '+1XXXXXXXXXX', 'to' => '+1YYYYYYYYYY' ];\n    $dialResult = yield $this->client->calling->dial($params);\n    if ($dialResult->isSuccessful()) {\n      // Your active $call..\n      $call = $dialResult->getCall();\n    }\n  }\n}\n\n$consumer = new CustomConsumer();\n$consumer->run();\n")),(0,o.kt)("h3",{id:"onincomingcall"},"onIncomingCall"),(0,o.kt)("p",null,"Executed when you receive an inbound call, passes in the inbound ",(0,o.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call"},(0,o.kt)("inlineCode",{parentName:"a"},"Call"))," object."),(0,o.kt)("p",null,"Available In: ",(0,o.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire dirname(__FILE__) . '/vendor/autoload.php';\n\nuse Generator as Coroutine;\n\nclass CustomConsumer extends SignalWire\\Relay\\Consumer {\n  public $project = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n  public $token = 'PTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n  public $contexts = ['default'];\n\n  public function onIncomingCall($call): Coroutine {\n    yield $call->answer();\n    yield $call->playTTS(['text' => 'Welcome to SignalWire!']);\n  }\n}\n\n$consumer = new CustomConsumer();\n$consumer->run();\n")),(0,o.kt)("h3",{id:"ontask"},"onTask"),(0,o.kt)("p",null,"Executed with your message sent through a ",(0,o.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_task"},(0,o.kt)("inlineCode",{parentName:"a"},"Relay.Task")),"."),(0,o.kt)("p",null,"Available In: ",(0,o.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire dirname(__FILE__) . '/vendor/autoload.php';\n\nuse Generator as Coroutine;\n\nclass CustomConsumer extends SignalWire\\Relay\\Consumer {\n  public $project = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n  public $token = 'PTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n  public $contexts = ['default'];\n\n  public function onTask($message): Coroutine {\n    yield;\n    print_r($message);\n    // ..Use your own $message sent in the context \"default\" from a Relay.Task\n  }\n}\n\n$consumer = new CustomConsumer();\n$consumer->run();\n")),(0,o.kt)("h3",{id:"onincomingmessage"},"onIncomingMessage"),(0,o.kt)("p",null,"Executed when you receive an inbound SMS or MMS, passes in the inbound ",(0,o.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_messaging/message"},(0,o.kt)("inlineCode",{parentName:"a"},"Message"))," object.",(0,o.kt)("br",null),"This method is a ",(0,o.kt)("em",{parentName:"p"},"Coroutine")," to simplify writing of asynchronous code in here."),(0,o.kt)("p",null,"Available In: ",(0,o.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire dirname(__FILE__) . '/vendor/autoload.php';\n\nuse Generator as Coroutine;\n\nclass CustomConsumer extends SignalWire\\Relay\\Consumer {\n  public $project = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n  public $token = 'PTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n  public $contexts = ['default'];\n\n  public function onIncomingMessage($message): Coroutine {\n    yield;\n    // Handle the inbound message here..\n  }\n}\n\n$consumer = new CustomConsumer();\n$consumer->run();\n")),(0,o.kt)("h3",{id:"onmessagestatechange"},"onMessageStateChange"),(0,o.kt)("p",null,"Executed when a message state changes, passes in the inbound ",(0,o.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_messaging/message"},(0,o.kt)("inlineCode",{parentName:"a"},"Message"))," object.",(0,o.kt)("br",null),"This method is a ",(0,o.kt)("em",{parentName:"p"},"Coroutine")," to simplify writing of asynchronous code in here."),(0,o.kt)("p",null,"Available In: ",(0,o.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire dirname(__FILE__) . '/vendor/autoload.php';\n\nuse Generator as Coroutine;\nuse SignalWire\\Log;\n\nclass CustomConsumer extends SignalWire\\Relay\\Consumer {\n  public $project = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n  public $token = 'PTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n  public $contexts = ['default'];\n\n  public function ready(): Coroutine {\n    $params = [\n      'context' => 'default',\n      'from' => '+1xxx',\n      'to' => '+1yyy',\n      'body' => 'Welcome at SignalWire!'\n    ];\n    $result = yield $this->client->messaging->send($params);\n    if ($result->isSuccessful()) {\n      Log::info('SMS queued successfully!');\n    }\n  }\n\n  public function onMessageStateChange($message): Coroutine {\n    yield;\n    // Keep track of your SMS state changes..\n    Log::info(\"Message {$message->id} state: {$message->state}.\");\n  }\n}\n\n$consumer = new CustomConsumer();\n$consumer->run();\n")),(0,o.kt)("h2",{id:"cleaning-up-on-exit"},"Cleaning Up on Exit"),(0,o.kt)("p",null,"When a Relay Consumer shuts down, you have the opportunity to clean up any resources held by the consumer. For example, you could close any open files, network connections, or send a notification to your monitoring service."),(0,o.kt)("p",null,"Just implement a ",(0,o.kt)("inlineCode",{parentName:"p"},"teardown")," method in your consumer and it will be called during the shutdown procedure."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nrequire dirname(__FILE__) . '/vendor/autoload.php';\n\nuse Generator as Coroutine;\n\nclass CustomConsumer extends SignalWire\\Relay\\Consumer {\n  public $project = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n  public $token = 'PTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';\n  public $contexts = ['default'];\n\n  public function onIncomingCall($call): Coroutine {\n    yield $call->answer();\n    yield $call->playTTS(['text' => 'Welcome to SignalWire!']);\n  }\n\n  public function teardown(): Coroutine {\n    // Clean up any resources when exiting.\n  }\n}\n\n$consumer = new CustomConsumer();\n$consumer->run();\n")),(0,o.kt)("h2",{id:"running-consumers"},"Running Consumers"),(0,o.kt)("p",null,"Running a consumer is just like running any other PHP script, simply execute the script as a separate process and ensure you invoke the ",(0,o.kt)("inlineCode",{parentName:"p"},"->run();")," method at the end of your script. The process will stay up until you shut it down."),(0,o.kt)("h2",{id:"shutting-down-consumers"},"Shutting Down Consumers"),(0,o.kt)("p",null,"In order to gracefully shut down a Relay consumer process, send it the ",(0,o.kt)("inlineCode",{parentName:"p"},"SIGTERM")," signal. Most process supervisors such as Runit, Docker and Kubernetes send this signal when shutting down a process, so using those systems will make things easier."))}c.isMDXComponent=!0}}]);