"use strict";(self.webpackChunksignalwire_community_docs=self.webpackChunksignalwire_community_docs||[]).push([[2414],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>k});var n=a(7294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var o=n.createContext({}),s=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=s(t.components);return n.createElement(o.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,o=t.parentName,d=p(t,["components","mdxType","originalType","parentName"]),c=s(a),k=l,u=c["".concat(o,".").concat(k)]||c[k]||m[k]||r;return a?n.createElement(u,i(i({ref:e},d),{},{components:a})):n.createElement(u,i({ref:e},d))}));function k(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=c;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p.mdxType="string"==typeof t?t:l,i[1]=p;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3465:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=a(7462),l=(a(7294),a(3905));const r={sidebar_label:"Call"},i="Relay.Calling.Call",p={unversionedId:"php/reference/relay_calling/call",id:"php/reference/relay_calling/call",title:"Relay.Calling.Call",description:"All calls in SignalWire have a common generic interface, Call. A Call is a connection between SignalWire and another device.",source:"@site/docs/php/reference/relay_calling/call.mdx",sourceDirName:"php/reference/relay_calling",slug:"/php/reference/relay_calling/call",permalink:"/docs/php/reference/relay_calling/call",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/php/reference/relay_calling/call.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Call"},sidebar:"phpSidebar",previous:{title:"AnswerResult",permalink:"/docs/php/reference/relay_calling/answer_result"},next:{title:"ConnectAction",permalink:"/docs/php/reference/relay_calling/connect_action"}},o={},s=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"amd",id:"amd",level:3},{value:"amdAsync",id:"amdasync",level:3},{value:"answer",id:"answer",level:3},{value:"connect",id:"connect",level:3},{value:"connectAsync",id:"connectasync",level:3},{value:"detect",id:"detect",level:3},{value:"detectAsync",id:"detectasync",level:3},{value:"detectAnsweringMachine",id:"detectansweringmachine",level:3},{value:"detectAnsweringMachineAsync",id:"detectansweringmachineasync",level:3},{value:"detectDigit",id:"detectdigit",level:3},{value:"detectDigitAsync",id:"detectdigitasync",level:3},{value:"detectFax",id:"detectfax",level:3},{value:"detectFaxAsync",id:"detectfaxasync",level:3},{value:"detectHuman",id:"detecthuman",level:3},{value:"detectHumanAsync",id:"detecthumanasync",level:3},{value:"detectMachine",id:"detectmachine",level:3},{value:"detectMachineAsync",id:"detectmachineasync",level:3},{value:"dial",id:"dial",level:3},{value:"faxReceive",id:"faxreceive",level:3},{value:"faxReceiveAsync",id:"faxreceiveasync",level:3},{value:"faxSend",id:"faxsend",level:3},{value:"faxSendAsync",id:"faxsendasync",level:3},{value:"hangup",id:"hangup",level:3},{value:"on",id:"on",level:3},{value:"off",id:"off",level:3},{value:"play",id:"play",level:3},{value:"playAsync",id:"playasync",level:3},{value:"playAudio",id:"playaudio",level:3},{value:"playAudioAsync",id:"playaudioasync",level:3},{value:"playRingtone",id:"playringtone",level:3},{value:"playRingtoneAsync",id:"playringtoneasync",level:3},{value:"playSilence",id:"playsilence",level:3},{value:"playSilenceAsync",id:"playsilenceasync",level:3},{value:"playTTS",id:"playtts",level:3},{value:"playTTSAsync",id:"playttsasync",level:3},{value:"prompt",id:"prompt",level:3},{value:"promptAsync",id:"promptasync",level:3},{value:"promptAudio",id:"promptaudio",level:3},{value:"promptAudioAsync",id:"promptaudioasync",level:3},{value:"promptRingtone",id:"promptringtone",level:3},{value:"promptRingtoneAsync",id:"promptringtoneasync",level:3},{value:"promptTTS",id:"prompttts",level:3},{value:"promptTTSAsync",id:"promptttsasync",level:3},{value:"record",id:"record",level:3},{value:"recordAsync",id:"recordasync",level:3},{value:"sendDigits",id:"senddigits",level:3},{value:"sendDigitsAsync",id:"senddigitsasync",level:3},{value:"tap",id:"tap",level:3},{value:"tapAsync",id:"tapasync",level:3},{value:"waitFor",id:"waitfor",level:3},{value:"waitForAnswered",id:"waitforanswered",level:3},{value:"waitForEnded",id:"waitforended",level:3},{value:"waitForEnding",id:"waitforending",level:3},{value:"waitForRinging",id:"waitforringing",level:3},{value:"Events",id:"events",level:2},{value:"State Events",id:"state-events",level:3},{value:"Connect Events",id:"connect-events",level:3},{value:"Play Events",id:"play-events",level:3},{value:"Record Events",id:"record-events",level:3},{value:"Prompt Events",id:"prompt-events",level:3},{value:"Fax Events",id:"fax-events",level:3},{value:"Detect Events",id:"detect-events",level:3},{value:"Tap Events",id:"tap-events",level:3},{value:"Digits Events",id:"digits-events",level:3},{value:"Ringtones",id:"ringtones",level:2}],d={toc:s};function m(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"relaycallingcall"},"Relay.Calling.Call"),(0,l.kt)("p",null,"All calls in SignalWire have a common generic interface, ",(0,l.kt)("inlineCode",{parentName:"p"},"Call"),". A ",(0,l.kt)("inlineCode",{parentName:"p"},"Call")," is a connection between SignalWire and another device."),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"id")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The unique identifier of the call.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The type of call. Only ",(0,l.kt)("inlineCode",{parentName:"td"},"phone")," is currently supported.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"from")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The phone number that the call is coming from.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"to")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The phone number you are attempting to call.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},"The seconds the call rings before being transferred to voicemail.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"state")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The current state of the call. See ",(0,l.kt)("a",{parentName:"td",href:"#state-events"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.Call")," State Events")," for all the possible call states.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"prevState")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The previous state of the call.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"context")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The context the call belongs to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"peer")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},(0,l.kt)("a",{parentName:"td",href:"/docs/php/reference/relay_calling/call"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.Call")))),(0,l.kt)("td",{parentName:"tr",align:null},"The call your original call is connected to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"active")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the call is active.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"ended")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the call has ended.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"answered")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the call has been answered.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"failed")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the call has failed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"busy")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the call was busy.")))),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("div",{class:"method-definitions"}),(0,l.kt)("h3",{id:"amd"},"amd"),(0,l.kt)("p",null,"Alias for ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachine")),"."),(0,l.kt)("h3",{id:"amdasync"},"amdAsync"),(0,l.kt)("p",null,"Alias for ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachineasync"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachineAsync")),"."),(0,l.kt)("h3",{id:"answer"},"answer"),(0,l.kt)("p",null,"Answer an inbound call."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v1.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/answer_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.AnswerResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Answer an inbound call and check if it was successful."',title:'"Answer',an:!0,inbound:!0,call:!0,and:!0,check:!0,if:!0,it:!0,was:!0,'successful."':!0},"<?php\n\n$call->answer()->done(function($answerResult) {\n\n});\n")),(0,l.kt)("h3",{id:"connect"},"connect"),(0,l.kt)("p",null,"Attempt to connect an existing call to a new outbound call and waits until one of the remote party picks the call or the connect fails.",(0,l.kt)("br",null),"This method involves complex nested parameters.\nYou can connect to multiple devices in series, parallel, or any combination of both with creative use of the parameters. Series implies one device at a time, while parallel implies multiple devices at the same time."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v1.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"devices")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"One or more arrays with the structure below.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Nested depends on whether to dial in serial or parallel."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ringback")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Ringback audio to play to call leg. You can play ",(0,l.kt)("em",{parentName:"td"},"audio"),", ",(0,l.kt)("em",{parentName:"td"},"tts"),", ",(0,l.kt)("em",{parentName:"td"},"silence")," or ",(0,l.kt)("em",{parentName:"td"},"ringtone"),". See ",(0,l.kt)("a",{parentName:"td",href:"#play"},(0,l.kt)("inlineCode",{parentName:"a"},"play")," media parameter")," for details.")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Structure of a device:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"The device type. Only ",(0,l.kt)("inlineCode",{parentName:"td"},"phone")," is currently supported.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"from")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"The party the call is coming from. ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"If not provided, the SDK will use the ",(0,l.kt)("inlineCode",{parentName:"em"},"from")," of the originator call.",(0,l.kt)("br",null),"Must be a SignalWire number or SIP endpoint that you own."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"to")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"The party you are attempting to connect with.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"The time, in seconds, the call will ring before going to voicemail.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/connect_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.ConnectResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Try connecting by calling '+18991114444' and '+18991114445' in series.\"",title:'"Try',connecting:!0,by:!0,calling:!0,"'+18991114444'":!0,and:!0,"'+18991114445'":!0,in:!0,'series."':!0},'<?php\n\n$devices = [\n  [ "type" => "phone", "to" => "+18991114444", "timeout" => 30 ],\n  [ "type" => "phone", "to" => "+18991114445", "timeout" => 20 ]\n];\n$call->connect(...$devices)->done(function($connectResult) {\n  if ($connectResult->isSuccessful()) {\n    $remoteCall = $connectResult->getCall();\n  }\n});\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Combine serial and parallel calling. Call '+18991114443' first and - if it doesn't answer - try calling in parallel '+18991114444' and '+18991114445'. If none of the devices answer, continue the same process with '+18991114446' and '+18991114447'.\"",title:'"Combine',serial:!0,and:!0,parallel:!0,"calling.":!0,Call:!0,"'+18991114443'":!0,first:!0,"-":!0,if:!0,it:!0,"doesn't":!0,answer:!0,try:!0,calling:!0,in:!0,"'+18991114444'":!0,"'+18991114445'.":!0,If:!0,none:!0,of:!0,the:!0,devices:!0,"answer,":!0,continue:!0,same:!0,process:!0,with:!0,"'+18991114446'":!0,"'+18991114447'.\"":!0},'<?php\n\n$devices = [\n  [ "type" => "phone", "to" => "+18991114443", "timeout" => 30 ],\n  [\n    [ "type" => "phone", "to" => "+18991114444", "timeout" => 30 ],\n    [ "type" => "phone", "to" => "+18991114445", "timeout" => 20 ]\n  ],\n  [\n    [ "type" => "phone", "to" => "+18991114446", "timeout" => 30 ],\n    [ "type" => "phone", "to" => "+18991114447", "timeout" => 20 ]\n  ]\n];\n$call->connect(...$devices)->done(function($connectResult) {\n  if ($connectResult->isSuccessful()) {\n    $remoteCall = $connectResult->getCall();\n  }\n});\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Try connecting by calling '+18991114444' and '+18991114445' in series playing the US ringtone.\"",title:'"Try',connecting:!0,by:!0,calling:!0,"'+18991114444'":!0,and:!0,"'+18991114445'":!0,in:!0,series:!0,playing:!0,the:!0,US:!0,'ringtone."':!0},'<?php\n\n$params = [\n  "devices" => [\n    [ "type" => "phone", "to" => "+18991114444" ],\n    [ "type" => "phone", "to" => "+18991114445" ]\n  ],\n  "ringback" => [ "type" => "ringtone", "name" => "us" ]\n];\n$call->connect(...$devices)->done(function($connectResult) {\n  if ($connectResult->isSuccessful()) {\n    $remoteCall = $connectResult->getCall();\n  }\n});\n')),(0,l.kt)("h3",{id:"connectasync"},"connectAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#connect"},(0,l.kt)("inlineCode",{parentName:"a"},"connect")),". It does not wait the connect to completes or fails but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/connect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.ConnectAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#connect"},(0,l.kt)("inlineCode",{parentName:"a"},"connect"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/connect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.ConnectAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Trying to connect a call by calling in series '+18991114444' and '+18991114445'.\"",title:'"Trying',to:!0,connect:!0,a:!0,call:!0,by:!0,calling:!0,in:!0,series:!0,"'+18991114444'":!0,and:!0,"'+18991114445'.\"":!0},'<?php\n\n$devices = [\n  [ "type" => "phone", "to" => "+18991114444", "timeout" => 30 ],\n  [ "type" => "phone", "to" => "+18991114445", "timeout" => 20 ]\n];\n$call->connect(...$devices)->done(function($connectAction) {\n  // .. do other important things while Relay try to connect your call..\n\n  // then check whether the action has completed\n  if ($connectAction->isCompleted()) {\n\n  }\n});\n')),(0,l.kt)("h3",{id:"detect"},"detect"),(0,l.kt)("p",null,"Start a detector on the call and waits until it has finished or failed."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"detect")," method is a generic method for all types of detecting, see ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachine")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectdigit"},(0,l.kt)("inlineCode",{parentName:"a"},"detectDigit"))," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectfax"},(0,l.kt)("inlineCode",{parentName:"a"},"detectFax"))," for more specific usage."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To detect an answering machine:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to run the detector.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 30.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wait_for_beep")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to wait until the AM is ready for voicemail delivery.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to false."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"initial_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to wait for initial voice before giving up.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 4.5."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"end_silence_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to wait for voice to finish.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 1.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine_voice_threshold")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How many seconds of voice to decide is a ",(0,l.kt)("em",{parentName:"td"},"machine"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 1.25."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine_words_threshold")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How many words to count to decide is a ",(0,l.kt)("em",{parentName:"td"},"machine"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 6."))))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To detect digits:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"digit"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to run the detector.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 30.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"digits")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"The digits to detect.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},'Defaults to "0123456789#',"*",'".'))))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To detect a fax:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fax"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to run the detector.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 30.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tone")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"The fax tone to detect: ",(0,l.kt)("inlineCode",{parentName:"td"},"CED")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"CNG"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},'Defaults to "CED".'))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect a machine with custom parameters and timeout."',title:'"Detect',a:!0,machine:!0,with:!0,custom:!0,parameters:!0,and:!0,'timeout."':!0},"<?php\n\n$params = [\n  'type' => 'machine',\n  'timeout' => 45,\n  'initial_timeout' => 3.0\n];\n$call->detect($params)->done(function($detectResult) {\n  if ($detectResult->isSuccessful()) {\n    $type = $detectResult->getType(); // machine\n    $result = $detectResult->getResult(); // MACHINE / HUMAN / UNKNOWN\n  }\n});\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect a Fax setting timeout only."',title:'"Detect',a:!0,Fax:!0,setting:!0,timeout:!0,'only."':!0},"<?php\n\n$params = [\n  'type' => 'fax',\n  'timeout' => 45\n];\n$call->detect($params)->done(function($detectResult) {\n  if ($detectResult->isSuccessful()) {\n\n  }\n});\n")),(0,l.kt)("h3",{id:"detectasync"},"detectAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detect"},(0,l.kt)("inlineCode",{parentName:"a"},"detect")),". It does not wait the detector ends but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detect"},(0,l.kt)("inlineCode",{parentName:"a"},"detect"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect digits using default parameters. Stop the action immediately."',title:'"Detect',digits:!0,using:!0,default:!0,"parameters.":!0,Stop:!0,the:!0,action:!0,'immediately."':!0},"<?php\n\n$call->on('detect.update', function ($call, $params) {\n  // Handle a detector event here..\n  print_r($params);\n});\n$call->detectAsync([ 'type' => 'digit' ])->done(function ($detectAction) {\n  // Do other things while detector runs and then stop it.\n  if (!$detectAction->isCompleted()) {\n    $detectAction->stop();\n  }\n});\n")),(0,l.kt)("h3",{id:"detectansweringmachine"},"detectAnsweringMachine"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detect"},(0,l.kt)("inlineCode",{parentName:"a"},"detect")),". The Promise will be resolved with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectResult"))," object as soon as the detector decided ",(0,l.kt)("em",{parentName:"p"},"who")," answered the call: ",(0,l.kt)("inlineCode",{parentName:"p"},"MACHINE"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"HUMAN")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"UNKNOWN"),"."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to run the detector.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 30.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wait_for_beep")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to wait until the AM is ready for voicemail delivery.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to false."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"initial_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to wait for initial voice before giving up.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 4.5."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"end_silence_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to wait for voice to finish.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 1.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine_voice_threshold")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How many seconds of voice to decide is a ",(0,l.kt)("em",{parentName:"td"},"machine"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 1.25."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine_words_threshold")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How many words to count to decide is a ",(0,l.kt)("em",{parentName:"td"},"machine"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 6."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Perform an AMD and wait until the machine is ready."',title:'"Perform',an:!0,AMD:!0,and:!0,wait:!0,until:!0,the:!0,machine:!0,is:!0,'ready."':!0},"<?php\n\n$params = [\n  'wait_for_beep' => true\n];\n$call->detectAnsweringMachine($params)->done(function($detectResult) {\n  if ($detectResult->isSuccessful()) {\n    $result = $detectResult->getResult(); // MACHINE || HUMAN || UNKNOWN\n  }\n});\n")),(0,l.kt)("h3",{id:"detectansweringmachineasync"},"detectAnsweringMachineAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachine")),". It does not wait the detector ends but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachine"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Perform an asynchronous AMD on the call. Then stop the action if not completed yet."',title:'"Perform',an:!0,asynchronous:!0,AMD:!0,on:!0,the:!0,"call.":!0,Then:!0,stop:!0,action:!0,if:!0,not:!0,completed:!0,'yet."':!0},"<?php\n\n$call->on('detect.update', function ($call, $params) {\n  // Handle a detector event here..\n  print_r($params);\n});\n$call->detectAnsweringMachineAsync()->done(function ($detectAction) {\n  // Do other things while detector runs and then stop it.\n  if (!$detectAction->isCompleted()) {\n    $detectAction->stop();\n  }\n});\n")),(0,l.kt)("h3",{id:"detectdigit"},"detectDigit"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detect"},(0,l.kt)("inlineCode",{parentName:"a"},"detect")),". This simplifies detecting ",(0,l.kt)("em",{parentName:"p"},"digits")," on a call."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to run the detector.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 30.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"digits")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"The digits to detect.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},'Defaults to "0123456789#',"*",'".'))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect digits and then write a log with the result."',title:'"Detect',digits:!0,and:!0,then:!0,write:!0,a:!0,log:!0,with:!0,the:!0,'result."':!0},'<?php\n\n$call->detectDigit()->done(function($detectResult) {\n  if ($detectResult->isSuccessful()) {\n    echo "Digits detected: " . $detectResult->getResult();\n  }\n});\n')),(0,l.kt)("h3",{id:"detectdigitasync"},"detectDigitAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectdigit"},(0,l.kt)("inlineCode",{parentName:"a"},"detectDigit")),". It does not wait the detector ends but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectdigit"},(0,l.kt)("inlineCode",{parentName:"a"},"detectDigit"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Detect only '1-3' digits asynchronously.\"",title:'"Detect',only:!0,"'1-3'":!0,digits:!0,'asynchronously."':!0},"<?php\n\n$call->on('detect.update', function ($call, $params) {\n  // Handle a detector event here..\n  print_r($params);\n});\n$call->detectDigitAsync([ 'digits' => '123' ])->done(function ($detectAction) {\n  // Do other things while detector runs and then stop it.\n  if (!$detectAction->isCompleted()) {\n    $detectAction->stop();\n  }\n});\n")),(0,l.kt)("h3",{id:"detectfax"},"detectFax"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detect"},(0,l.kt)("inlineCode",{parentName:"a"},"detect")),". This simplifies detecting a ",(0,l.kt)("em",{parentName:"p"},"fax"),"."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to run the detector.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 30.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tone")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"The fax tone to detect: ",(0,l.kt)("inlineCode",{parentName:"td"},"CED")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"CNG"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},'Defaults to "CED".'))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect fax on the current call."',title:'"Detect',fax:!0,on:!0,the:!0,current:!0,'call."':!0},"<?php\n\n$call->detectFax()->done(function($detectResult) {\n  if ($detectResult->isSuccessful()) {\n    // A fax has been detected!\n  }\n});\n")),(0,l.kt)("h3",{id:"detectfaxasync"},"detectFaxAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectfax"},(0,l.kt)("inlineCode",{parentName:"a"},"detectFax")),". It does not wait the detector ends but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectfax"},(0,l.kt)("inlineCode",{parentName:"a"},"detectFax"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect fax on the current call. Stop the action immediately."',title:'"Detect',fax:!0,on:!0,the:!0,current:!0,"call.":!0,Stop:!0,action:!0,'immediately."':!0},"<?php\n\n$call->on('detect.update', function ($call, $params) {\n  // Handle a detector event here..\n  print_r($params);\n});\n$call->detectFaxAsync()->done(function ($detectAction) {\n  // Do other things while detector runs and then stop it.\n  if (!$detectAction->isCompleted()) {\n    $detectAction->stop();\n  }\n});\n")),(0,l.kt)("h3",{id:"detecthuman"},"detectHuman"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detect"},(0,l.kt)("inlineCode",{parentName:"a"},"detect")),". This simplifies detecting a ",(0,l.kt)("em",{parentName:"p"},"human")," on the call and is the inverse of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectMachine")),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Deprecated since"),": ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2-important.svg"})," Use ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachine"))," instead."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to run the detector.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 30.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wait_for_beep")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to wait until the AM is ready for voicemail delivery.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to false."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"initial_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to wait for initial voice before giving up.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 4.5."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"end_silence_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to wait for voice to finish.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 1.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine_voice_threshold")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How many seconds of voice to decide is a ",(0,l.kt)("em",{parentName:"td"},"machine"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 1.25."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine_words_threshold")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How many words to count to decide is a ",(0,l.kt)("em",{parentName:"td"},"machine"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 6."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect a human on the current call."',title:'"Detect',a:!0,human:!0,on:!0,the:!0,current:!0,'call."':!0},"<?php\n\n$call->detectHuman()->done(function($detectResult) {\n  if ($detectResult->isSuccessful()) {\n    // A human has been detected!\n  }\n});\n")),(0,l.kt)("h3",{id:"detecthumanasync"},"detectHumanAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detecthuman"},(0,l.kt)("inlineCode",{parentName:"a"},"detectHuman")),". It does not wait the detector ends but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," you can interact with."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Deprecated since"),": ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2-important.svg"})," Use ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachineasync"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachineAsync"))," instead."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detecthuman"},(0,l.kt)("inlineCode",{parentName:"a"},"detectHuman"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect a human on the current call. Stop the action immediately."',title:'"Detect',a:!0,human:!0,on:!0,the:!0,current:!0,"call.":!0,Stop:!0,action:!0,'immediately."':!0},"<?php\n\n$call->detectHumanAsync()->done(function ($detectAction) {\n  // For demonstration purposes only..\n  $detectAction->stop();\n});\n")),(0,l.kt)("h3",{id:"detectmachine"},"detectMachine"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detect"},(0,l.kt)("inlineCode",{parentName:"a"},"detect")),". This simplifies detecting a ",(0,l.kt)("em",{parentName:"p"},"machine")," on the call and is the inverse of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detecthuman"},(0,l.kt)("inlineCode",{parentName:"a"},"detectHuman")),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Deprecated since"),": ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2-important.svg"})," Use ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachine"))," instead."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to run the detector.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 30.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"wait_for_beep")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to wait until the AM is ready for voicemail delivery.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to false."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"initial_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to wait for initial voice before giving up.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 4.5."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"end_silence_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds to wait for voice to finish.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 1.0."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine_voice_threshold")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How many seconds of voice to decide is a ",(0,l.kt)("em",{parentName:"td"},"machine"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 1.25."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"machine_words_threshold")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How many words to count to decide is a ",(0,l.kt)("em",{parentName:"td"},"machine"),".",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to 6."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect a machine on the current call."',title:'"Detect',a:!0,machine:!0,on:!0,the:!0,current:!0,'call."':!0},"<?php\n\n$call->detectMachine()->done(function($detectResult) {\n  if ($detectResult->isSuccessful()) {\n    // A machine has been detected!\n  }\n});\n")),(0,l.kt)("h3",{id:"detectmachineasync"},"detectMachineAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectMachine")),". It does not wait the detector ends but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," you can interact with."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Deprecated since"),": ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2-important.svg"})," Use ",(0,l.kt)("a",{parentName:"p",href:"#detectansweringmachineasync"},(0,l.kt)("inlineCode",{parentName:"a"},"detectAnsweringMachineAsync"))," instead."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#detectmachine"},(0,l.kt)("inlineCode",{parentName:"a"},"detectMachine"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/detect_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DetectAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Detect a machine on the current call. Stop the action immediately."',title:'"Detect',a:!0,machine:!0,on:!0,the:!0,current:!0,"call.":!0,Stop:!0,action:!0,'immediately."':!0},"<?php\n\n$call->detectMachineAsync()->done(function ($detectAction) {\n  // For demonstration purposes only..\n  $detectAction->stop();\n});\n")),(0,l.kt)("h3",{id:"dial"},"dial"),(0,l.kt)("p",null,"This will start a call that was created with ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/#newcall"},(0,l.kt)("inlineCode",{parentName:"a"},"newCall"))," and waits until the Call has been answered or hung up."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/dial_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.DialResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n$call->dial()->done(function($dialResult) {\n\n});\n")),(0,l.kt)("h3",{id:"faxreceive"},"faxReceive"),(0,l.kt)("p",null,"Prepare the call to receive an inbound fax. It waits until the fax has been received or failed."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/fax_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.FaxResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Receiving a fax on the call and print logs for URL and number of received pages."',title:'"Receiving',a:!0,fax:!0,on:!0,the:!0,call:!0,and:!0,print:!0,logs:!0,for:!0,URL:!0,number:!0,of:!0,received:!0,'pages."':!0},"<?php\n\n$call->faxReceive()->done(function($faxResult) {\n  echo 'URL: ' . $faxResult->getDocument() . PHP_EOL;\n  echo 'Total pages: ' . $faxResult->getPages();\n});\n")),(0,l.kt)("h3",{id:"faxreceiveasync"},"faxReceiveAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#faxreceive"},(0,l.kt)("inlineCode",{parentName:"a"},"faxReceive")),". It does not wait the fax to be received but returns ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/fax_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.FaxAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/fax_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.FaxAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Trying to receive a fax and then stop it."',title:'"Trying',to:!0,receive:!0,a:!0,fax:!0,and:!0,then:!0,stop:!0,'it."':!0},"<?php\n\n$call->faxReceiveAsync()->done(function ($faxAction) {\n  // For demonstration purposes only..\n  $faxAction->stop();\n});\n")),(0,l.kt)("h3",{id:"faxsend"},"faxSend"),(0,l.kt)("p",null,"Send a fax through the call. It waits until the fax has been sent or failed."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$document")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Http(s) URL to the document to send.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"PDF format only."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$identity")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Identity to display on receiving fax.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Defaults to SignalWire DID."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$header")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Custom string to add to header of each fax page.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Set to empty string to disable sending any header."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/fax_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.FaxResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Sending a fax on the call and print logs the number of sent pages."',title:'"Sending',a:!0,fax:!0,on:!0,the:!0,call:!0,and:!0,print:!0,logs:!0,number:!0,of:!0,sent:!0,'pages."':!0},"<?php\n\n$call->faxSend('https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf', null, 'Custom Header')->done(function($faxResult) {\n  echo \"\\n URL: \" . $faxResult->getDocument();\n  echo \"\\n Total pages: \" . $faxResult->getPages();\n});\n")),(0,l.kt)("h3",{id:"faxsendasync"},"faxSendAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#faxsend"},(0,l.kt)("inlineCode",{parentName:"a"},"faxSend")),". It does not wait the fax to be sent but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/fax_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.FaxAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#faxsend"},(0,l.kt)("inlineCode",{parentName:"a"},"faxSend"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/fax_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.FaxAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Trying to send a fax and then stop it."',title:'"Trying',to:!0,send:!0,a:!0,fax:!0,and:!0,then:!0,stop:!0,'it."':!0},"<?php\n\n$call->faxSendAsync('https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf', null, 'Custom Header')->done(function ($faxAction) {\n  // For demonstration purposes only..\n  $faxAction->stop();\n});\n")),(0,l.kt)("h3",{id:"hangup"},"hangup"),(0,l.kt)("p",null,"Hangup the call."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v1.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/hangup_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.HangupResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Hangup the current call and check if it was successful."',title:'"Hangup',the:!0,current:!0,call:!0,and:!0,check:!0,if:!0,it:!0,was:!0,'successful."':!0},"<?php\n\n$call->hangup()->done(function($hangupResult) {\n  if ($hangupResult->isSuccessful()) {\n\n  }\n});\n")),(0,l.kt)("h3",{id:"on"},"on"),(0,l.kt)("p",null,"Attach an event handler for the ",(0,l.kt)("em",{parentName:"p"},"event"),"."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v1.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$event")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Event name. Full list of events ",(0,l.kt)("a",{parentName:"td",href:"/docs/php/reference/relay_calling/call#events"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.Call")," Events"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$handler")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"callable")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Handler to call when the event comes.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.Call"))," - The call object itself."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Subscribe to the 'answered' and 'ended' events for a given call.\"",title:'"Subscribe',to:!0,the:!0,"'answered'":!0,and:!0,"'ended'":!0,events:!0,for:!0,a:!0,given:!0,'call."':!0},"<?php\n\n$call->on('ended', function($call) {\n  // Call has ended.. cleanup something?\n});\n")),(0,l.kt)("h3",{id:"off"},"off"),(0,l.kt)("p",null,"Remove an event handler that were attached with the ",(0,l.kt)("inlineCode",{parentName:"p"},"on")," method. If you don't pass a ",(0,l.kt)("inlineCode",{parentName:"p"},"$handler"),", all listeners for that ",(0,l.kt)("em",{parentName:"p"},"event")," will be removed."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v1.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$event")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Event name. Full list of events ",(0,l.kt)("a",{parentName:"td",href:"/docs/php/reference/relay_calling/call#events"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.Call")," Events"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$handler")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"callable")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Handler to remove. ",(0,l.kt)("br",null)," ",(0,l.kt)("em",{parentName:"td"},"Note: ",(0,l.kt)("inlineCode",{parentName:"em"},"$handler")," will be removed from the stack by reference so make sure to use the same reference in both ",(0,l.kt)("inlineCode",{parentName:"em"},"on")," and ",(0,l.kt)("inlineCode",{parentName:"em"},"off")," methods."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.Call"))," - The call object itself."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Subscribe to the call 'ended' state change and then, remove the event handler.\"",title:'"Subscribe',to:!0,the:!0,call:!0,"'ended'":!0,state:!0,change:!0,and:!0,"then,":!0,remove:!0,event:!0,'handler."':!0},"<?php\n\n$callback = function($call) {\n  // Call has ended.\n};\n\n$call->on('ended', $callback);\n\n// .. later\n$call->off('ended', $callback);\n")),(0,l.kt)("h3",{id:"play"},"play"),(0,l.kt)("p",null,"Play one or multiple media in a call and waits until the playing has ended."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"play")," method is a generic method for all types of playing, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playaudio"},(0,l.kt)("inlineCode",{parentName:"a"},"playAudio")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playsilence"},(0,l.kt)("inlineCode",{parentName:"a"},"playSilence")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playtts"},(0,l.kt)("inlineCode",{parentName:"a"},"playTTS"))," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playringtone"},(0,l.kt)("inlineCode",{parentName:"a"},"playRingtone"))," for more specific usage."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"media")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"List of media elements to play. See below for each type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"volume")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.3+-lightgrey.svg"})," Volume value between -40dB and +40dB where 0 is unchanged.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default is ",(0,l.kt)("inlineCode",{parentName:"em"},"0"),"."))))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To play an audio file:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"audio"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"url")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Http(s) URL to ",(0,l.kt)("inlineCode",{parentName:"td"},"audio")," resource to play.")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To play a text to speech string:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tts"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"text")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"TTS to play.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"language")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"en-US"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"gender")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"male")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"female"),". Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"female"),".")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To play silence:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"silence"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"duration")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Seconds of silence to play.")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To play ringtone:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ringtone"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the ringtone. See ",(0,l.kt)("a",{parentName:"td",href:"/docs/php/reference/relay_calling/call#ringtones"},(0,l.kt)("inlineCode",{parentName:"a"},"ringtones"))," for the supported values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"duration")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Duration of ringtone to play.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default to 1 ringtone iteration."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Play multiple media elements in the call."',title:'"Play',multiple:!0,media:!0,elements:!0,in:!0,the:!0,'call."':!0},'<?php\n\n$params = [\n  \'media\' => [\n    [ "type" => "tts", "text" => "Listen this awesome file!" ],\n    [ "type" => "audio", "url" => "https://example.domain.com/audio.mp3" ],\n    [ "type" => "silence", "duration" => 5 ],\n    [ "type" => "tts", "text" => "Did you like it?" ]\n  ],\n  \'volume\' => 4.0\n];\n$call->play($params)->done(function ($playResult) {\n  if ($playResult->isSuccessful()) {\n\n  }\n});\n')),(0,l.kt)("h3",{id:"playasync"},"playAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"#play"},(0,l.kt)("inlineCode",{parentName:"a"},"play")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"playing")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#play"},(0,l.kt)("inlineCode",{parentName:"a"},"play"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Play multiple media elements in the call and then stop it."',title:'"Play',multiple:!0,media:!0,elements:!0,in:!0,the:!0,call:!0,and:!0,then:!0,stop:!0,'it."':!0},'<?php\n\n$params = [\n  \'media\' => [\n    [ "type" => "tts", "text" => "Listen this awesome file!" ],\n    [ "type" => "audio", "url" => "https://example.domain.com/audio.mp3" ],\n    [ "type" => "silence", "duration" => 5 ],\n    [ "type" => "tts", "text" => "Did you like it?" ]\n  ],\n  \'volume\' => 4.0\n];\n$call->playAsync($params)->done(function ($playAction) {\n  // For demonstration purposes only..\n  $playAction->stop();\n});\n')),(0,l.kt)("h3",{id:"playaudio"},"playAudio"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"#play"},(0,l.kt)("inlineCode",{parentName:"a"},"play")),". This simplifies playing an audio file."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v1.2+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"url")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Http(s) URL to audio resource to play.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"volume")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.3+-lightgrey.svg"})," Volume value between -40dB and +40dB where 0 is unchanged.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default is ",(0,l.kt)("inlineCode",{parentName:"em"},"0"),"."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Play an Mp3 file using the signature with a 'string' as parameter.\"",title:'"Play',an:!0,Mp3:!0,file:!0,using:!0,the:!0,signature:!0,with:!0,a:!0,"'string'":!0,as:!0,'parameter."':!0},"<?php\n\n$call->playAudio('https://cdn.signalwire.com/default-music/welcome.mp3')->done(function($playResult) {\n  // interact with $playResult..\n});\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Play an Mp3 file setting volume level to 4dB. Require v2.3+."',title:'"Play',an:!0,Mp3:!0,file:!0,setting:!0,volume:!0,level:!0,to:!0,"4dB.":!0,Require:!0,'v2.3+."':!0},"<?php\n\n$params = [\n  'url' => 'https://cdn.signalwire.com/default-music/welcome.mp3',\n  'volume' => 4.0\n];\n$call->playAudio($params)->done(function($playResult) {\n  // interact with $playResult..\n});\n")),(0,l.kt)("h3",{id:"playaudioasync"},"playAudioAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playaudio"},(0,l.kt)("inlineCode",{parentName:"a"},"playAudio")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"playing")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playaudio"},(0,l.kt)("inlineCode",{parentName:"a"},"playAudio"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",5:!0,className:"language-php",metastring:'title="Play an Mp3 file and stop it after 5 seconds."',title:'"Play',an:!0,Mp3:!0,file:!0,and:!0,stop:!0,it:!0,after:!0,'seconds."':!0},"<?php\n\n$call->playAudioAsync('https://cdn.signalwire.com/default-music/welcome.mp3')->done(function($playAction) {\n  // For demonstration purposes only..\n  $playAction->stop();\n});\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",5:!0,className:"language-php",metastring:'title="Play an Mp3 file setting the volume and stop it after 5 seconds."',title:'"Play',an:!0,Mp3:!0,file:!0,setting:!0,the:!0,volume:!0,and:!0,stop:!0,it:!0,after:!0,'seconds."':!0},"<?php\n\n$params = [\n  'url' => 'https://cdn.signalwire.com/default-music/welcome.mp3',\n  'volume' => 4.0\n];\n$call->playAudioAsync($params)->done(function($playAction) {\n  // For demonstration purposes only..\n  $playAction->stop();\n});\n")),(0,l.kt)("h3",{id:"playringtone"},"playRingtone"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"#play"},(0,l.kt)("inlineCode",{parentName:"a"},"play")),". This simplifies play a ringtone."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.3+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the ringtone. See ",(0,l.kt)("a",{parentName:"td",href:"/docs/php/reference/relay_calling/call#ringtones"},(0,l.kt)("inlineCode",{parentName:"a"},"ringtones"))," for the supported values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"duration")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Duration of ringtone to play.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default to 1 ringtone iteration."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"volume")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Volume value between -40dB and +40dB where 0 is unchanged.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default is ",(0,l.kt)("inlineCode",{parentName:"em"},"0"),"."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Play a single US ringtone."',title:'"Play',a:!0,single:!0,US:!0,'ringtone."':!0},"<?php\n\n$params = [ 'name' => 'us' ];\n$call->playRingtone($params)->done(function($playResult) {\n  // interact with $playResult..\n});\n")),(0,l.kt)("h3",{id:"playringtoneasync"},"playRingtoneAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playringtone"},(0,l.kt)("inlineCode",{parentName:"a"},"playRingtone")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"playing")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.3+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playringtone"},(0,l.kt)("inlineCode",{parentName:"a"},"playRingtone"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",30:!0,className:"language-php",metastring:"title=\"Play US ringtone for 30 seconds, if 'Agent' is available, stop the play.\"",title:'"Play',US:!0,ringtone:!0,for:!0,"seconds,":!0,if:!0,"'Agent'":!0,is:!0,"available,":!0,stop:!0,the:!0,'play."':!0},"<?php\n\n$params = [ 'name' => 'us', 'duration' => 30 ];\n$call->playRingtoneAsync($params)->done(function($playAction) use ($globalAgent) {\n  // For demonstration purposes only ..\n  if ($globalAgent->isAvailable()) {\n    $playAction->stop();\n  }\n});\n")),(0,l.kt)("h3",{id:"playsilence"},"playSilence"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"#play"},(0,l.kt)("inlineCode",{parentName:"a"},"play")),". This simplifies playing silence."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v1.2+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$duration")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Seconds of silence to play.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",10:!0,className:"language-php",metastring:'title="Play silence for 10 seconds."',title:'"Play',silence:!0,for:!0,'seconds."':!0},"<?php\n\n$call->playSilence(10)->done(function($playResult) {\n  // interact with $playResult..\n});\n")),(0,l.kt)("h3",{id:"playsilenceasync"},"playSilenceAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playsilence"},(0,l.kt)("inlineCode",{parentName:"a"},"playSilence")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"playing")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playsilence"},(0,l.kt)("inlineCode",{parentName:"a"},"playSilence"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",60:!0,className:"language-php",metastring:"title=\"Play silence for 60 seconds, if 'Agent' is available, stop the play.\"",title:'"Play',silence:!0,for:!0,"seconds,":!0,if:!0,"'Agent'":!0,is:!0,"available,":!0,stop:!0,the:!0,'play."':!0},"<?php\n\n$call->playSilenceAsync(60)->done(function($playAction) use ($globalAgent) {\n  // For demonstration purposes only ..\n  if ($globalAgent->isAvailable()) {\n    $playAction->stop();\n  }\n});\n")),(0,l.kt)("h3",{id:"playtts"},"playTTS"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"#play"},(0,l.kt)("inlineCode",{parentName:"a"},"play")),". This simplifies playing TTS."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v1.2+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"text")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"TTS to play.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"language")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"en-US"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"gender")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"male")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"female"),". Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"female"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"volume")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.3+-lightgrey.svg"})," Volume value between -40dB and +40dB where 0 is unchanged.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default is ",(0,l.kt)("inlineCode",{parentName:"em"},"0"),"."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Play TTS."',title:'"Play','TTS."':!0},"<?php\n\n$params = [ 'text' => 'Welcome to SignalWire!' ];\n$call->playTTS($params)->done(function($playResult) {\n  // interact with $playResult..\n});\n")),(0,l.kt)("h3",{id:"playttsasync"},"playTTSAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playtts"},(0,l.kt)("inlineCode",{parentName:"a"},"playTTS")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"playing")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#playtts"},(0,l.kt)("inlineCode",{parentName:"a"},"playTTS"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/play_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PlayAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",5:!0,className:"language-php",metastring:'title="Play TTS and stop it after 5 seconds."',title:'"Play',TTS:!0,and:!0,stop:!0,it:!0,after:!0,'seconds."':!0},"<?php\n\n$params = [ 'text' => 'Welcome to SignalWire!' ];\n$call->playTTSAsync($params)->done(function($playAction) {\n  // interact with $playAction..\n\n  $playAction->stop();\n});\n")),(0,l.kt)("h3",{id:"prompt"},"prompt"),(0,l.kt)("p",null,"Play one or multiple media while collecting user's input from the call at the same time, such as ",(0,l.kt)("em",{parentName:"p"},"digits")," and ",(0,l.kt)("em",{parentName:"p"},"speech"),"."),(0,l.kt)("p",null,"It waits until the collection succeed or timeout is reached."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"prompt")," method is a generic method, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#promptaudio"},(0,l.kt)("inlineCode",{parentName:"a"},"promptAudio")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompttts"},(0,l.kt)("inlineCode",{parentName:"a"},"promptTTS"))," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#promptringtone"},(0,l.kt)("inlineCode",{parentName:"a"},"promptRingtone"))," for more specific usage."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$collect")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"digits"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"speech")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"both"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"media")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"List of media elements to play. See ",(0,l.kt)("a",{parentName:"td",href:"#play"},(0,l.kt)("inlineCode",{parentName:"a"},"play"))," for the array structure.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"initial_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Initial timeout in seconds. ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default to 4 seconds."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"volume")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.3+-lightgrey.svg"})," Volume value between -40dB and +40dB where 0 is unchanged.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default is ",(0,l.kt)("inlineCode",{parentName:"em"},"0"),"."))))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To collect digits:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"digits_max")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Max digits to collect.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"digits_terminators")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"DTMF digits that will end the recording. ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default not set."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"digits_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Timeout in seconds between each digit.")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To collect speech:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"end_silence_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How much silence to wait for end of speech. ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default to 1 second."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"speech_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Maximum time to collect speech. ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default to 60 seconds."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"speech_language")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Language to detect. ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default to ",(0,l.kt)("inlineCode",{parentName:"em"},"en-US"),"."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"speech_hints")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Array of expected phrases to detect.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Ask user to enter their PIN and collect the digits."',title:'"Ask',user:!0,to:!0,enter:!0,their:!0,PIN:!0,and:!0,collect:!0,the:!0,'digits."':!0},"<?php\n\n$mediaToPlay = [\n  ['type' => 'tts', 'text' => 'Welcome at SignalWire. Please, enter your PIN and then # to proceed']\n];\n$collect = [\n  'type' => 'digits',\n  'digits_max' => 4,\n  'digits_terminators' => '#',\n  'media' => $mediaToPlay\n];\n$call->prompt($collect)->done(function($promptResult) {\n  if ($promptResult->isSuccessful()) {\n    $type = $promptResult->getType(); // => digit\n    $pin = $promptResult->getResult(); // => pin entered by the user\n  }\n});\n")),(0,l.kt)("h3",{id:"promptasync"},"promptAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompt"},(0,l.kt)("inlineCode",{parentName:"a"},"prompt")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"collection")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompt"},(0,l.kt)("inlineCode",{parentName:"a"},"prompt"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Ask user to enter their PIN and collect the digits."',title:'"Ask',user:!0,to:!0,enter:!0,their:!0,PIN:!0,and:!0,collect:!0,the:!0,'digits."':!0},"<?php\n\n$mediaToPlay = [\n  ['type' => 'tts', 'text' => 'Welcome at SignalWire. Please, enter your PIN and then # to proceed']\n];\n$collect = [\n  'type' => 'digits',\n  'digits_max' => 4,\n  'digits_terminators' => '#',\n  'media' => $mediaToPlay\n];\n$call->promptAsync($collect, $tts)->done(function($promptAction) {\n  // .. do other important things while collecting user digits..\n  if ($promptAction->isCompleted()) {\n    $promptResult = $promptAction->getResult(); // => Relay.Calling.PromptResult Object\n  }\n});\n")),(0,l.kt)("h3",{id:"promptaudio"},"promptAudio"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompt"},(0,l.kt)("inlineCode",{parentName:"a"},"prompt")),".",(0,l.kt)("br",null),"This function simplifies playing an audio file while collecting user's input from the call, such as ",(0,l.kt)("em",{parentName:"p"},"digits")," and ",(0,l.kt)("em",{parentName:"p"},"speech"),"."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"You can set all the properties that ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompt"},(0,l.kt)("inlineCode",{parentName:"a"},"prompt"))," accepts replacing ",(0,l.kt)("inlineCode",{parentName:"p"},"media")," with:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"url")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Http(s) URL to ",(0,l.kt)("inlineCode",{parentName:"td"},"audio")," resource to play.")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"The SDK will build the media for you.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Collect user\'s digits while playing an Mp3 file."',title:'"Collect',"user's":!0,digits:!0,while:!0,playing:!0,an:!0,Mp3:!0,'file."':!0},"<?php\n\n$collect = [\n  'type' => 'digits',\n  'digits_max' => 4,\n  'url' => 'https://cdn.signalwire.com/default-music/welcome.mp3'\n];\n$call->promptAudio($collect)->done(function($promptResult) {\n  if ($promptResult->isSuccessful()) {\n    $type = $promptResult->getType(); // => digit\n    $pin = $promptResult->getResult(); // => pin entered by the user\n  }\n});\n")),(0,l.kt)("h3",{id:"promptaudioasync"},"promptAudioAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#promptaudio"},(0,l.kt)("inlineCode",{parentName:"a"},"promptAudio")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"collection")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#promptaudio"},(0,l.kt)("inlineCode",{parentName:"a"},"promptAudio"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Ask user to enter their PIN and collect the digits."',title:'"Ask',user:!0,to:!0,enter:!0,their:!0,PIN:!0,and:!0,collect:!0,the:!0,'digits."':!0},"<?php\n\n$collect = [\n  'type' => 'digits',\n  'digits_max' => 4,\n  'url' => 'https://cdn.signalwire.com/default-music/welcome.mp3'\n];\n$call->promptAudioAsync($collect)->done(function($promptAction) {\n  // .. do other important things while collecting user digits..\n  if ($promptAction->isCompleted()) {\n    $promptResult = $promptAction->getResult(); // => Relay.Calling.PromptResult Object\n  }\n});\n")),(0,l.kt)("h3",{id:"promptringtone"},"promptRingtone"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompt"},(0,l.kt)("inlineCode",{parentName:"a"},"prompt")),".",(0,l.kt)("br",null),"This function simplifies playing ringtone while collecting user's input from the call, such as ",(0,l.kt)("em",{parentName:"p"},"digits")," and ",(0,l.kt)("em",{parentName:"p"},"speech"),"."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.3+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"You can set all the properties that ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompt"},(0,l.kt)("inlineCode",{parentName:"a"},"prompt"))," accepts replacing ",(0,l.kt)("inlineCode",{parentName:"p"},"media")," with:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the ringtone. See ",(0,l.kt)("a",{parentName:"td",href:"/docs/php/reference/relay_calling/call#ringtones"},(0,l.kt)("inlineCode",{parentName:"a"},"ringtones"))," for the supported values.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"duration")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Duration of ringtone to play.",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default to 1 ringtone iteration."))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",30:!0,className:"language-php",metastring:'title="Play US ringtone for 30 seconds while collect digits."',title:'"Play',US:!0,ringtone:!0,for:!0,seconds:!0,while:!0,collect:!0,'digits."':!0},"<?php\n\n$params = [\n  'type' => 'digits',\n  'digits_max' => 3,\n  'name' => 'us',\n  'duration' => '30'\n];\n$call->promptRingtone($params)->done(function($promptResult) {\n  if ($promptResult->isSuccessful()) {\n    $type = $promptResult->getType(); // => digit\n    $pin = $promptResult->getResult(); // => user's digits\n  }\n});\n")),(0,l.kt)("h3",{id:"promptringtoneasync"},"promptRingtoneAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#promptringtone"},(0,l.kt)("inlineCode",{parentName:"a"},"promptRingtone")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"collection")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.3+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#promptringtone"},(0,l.kt)("inlineCode",{parentName:"a"},"promptRingtone"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",30:!0,className:"language-php",metastring:'title="Play US ringtone for 30 seconds while collect digits in asynchronous."',title:'"Play',US:!0,ringtone:!0,for:!0,seconds:!0,while:!0,collect:!0,digits:!0,in:!0,'asynchronous."':!0},"<?php\n\n$collect = [\n  'type' => 'digits',\n  'digits_max' => 3,\n  'name' => 'us',\n  'duration' => '30'\n];\n$call->promptRingtoneAsync($collect)->done(function($promptAction) {\n  // .. do other important things while collecting user digits..\n\n  if ($promptAction->isCompleted()) {\n    $promptResult = $promptAction->getResult(); // => Relay.Calling.PromptResult Object\n  }\n});\n")),(0,l.kt)("h3",{id:"prompttts"},"promptTTS"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompt"},(0,l.kt)("inlineCode",{parentName:"a"},"prompt")),".",(0,l.kt)("br",null),"This function simplifies playing TTS while collecting user's input from the call, such as ",(0,l.kt)("em",{parentName:"p"},"digits")," and ",(0,l.kt)("em",{parentName:"p"},"speech"),"."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"You can set all the properties that ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompt"},(0,l.kt)("inlineCode",{parentName:"a"},"prompt"))," accepts replacing ",(0,l.kt)("inlineCode",{parentName:"p"},"media")," with:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"text")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Text-to-speech string to play.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"language")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"en-US"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"gender")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"male")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"female"),". Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"female"),".")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Ask user to enter their PIN and collect the digits."',title:'"Ask',user:!0,to:!0,enter:!0,their:!0,PIN:!0,and:!0,collect:!0,the:!0,'digits."':!0},"<?php\n\n$collect = [\n  'type' => 'digits',\n  'digits_max' => 3,\n  'text' => 'Please, enter your 3 digit PIN.'\n];\n$call->promptTTS($collect)->done(function($promptResult) {\n  if ($promptResult->isSuccessful()) {\n    $type = $promptResult->getType(); // => digit\n    $pin = $promptResult->getResult(); // => pin entered by the user\n  }\n});\n")),(0,l.kt)("h3",{id:"promptttsasync"},"promptTTSAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompttts"},(0,l.kt)("inlineCode",{parentName:"a"},"promptTTS")),". It does not wait the ",(0,l.kt)("em",{parentName:"p"},"collection")," to completes but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#prompttts"},(0,l.kt)("inlineCode",{parentName:"a"},"promptTTS"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/prompt_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.PromptAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Ask user to enter their PIN and collect the digits."',title:'"Ask',user:!0,to:!0,enter:!0,their:!0,PIN:!0,and:!0,collect:!0,the:!0,'digits."':!0},"<?php\n\n$collect = [\n  'type' => 'digits',\n  'digits_max' => 3,\n  'text' => 'Please, enter your 3 digit PIN.'\n];\n$call->promptTTSAsync($collect)->done(function($promptAction) {\n  // .. do other important things while collecting user digits..\n  if ($promptAction->isCompleted()) {\n    $promptResult = $promptAction->getResult(); // => Relay.Calling.PromptResult Object\n  }\n});\n")),(0,l.kt)("h3",{id:"record"},"record"),(0,l.kt)("p",null,"Start recording the call and waits until the recording ends or fails."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$params")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"beep")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"stereo")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"format")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mp3")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"wav"),". ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default ",(0,l.kt)("inlineCode",{parentName:"em"},"mp3"),"."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"direction")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"listen"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"speak")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"both"),". Default to ",(0,l.kt)("inlineCode",{parentName:"td"},"speak"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"initial_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How long to wait in seconds until something is heard in the recording. Disable with ",(0,l.kt)("inlineCode",{parentName:"td"},"0"),". ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default ",(0,l.kt)("inlineCode",{parentName:"em"},"5.0"),"."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"end_silence_timeout")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"How long to wait in seconds until caller has stopped speaking. Disable with ",(0,l.kt)("inlineCode",{parentName:"td"},"0"),". ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default ",(0,l.kt)("inlineCode",{parentName:"em"},"1.0"),"."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"terminators")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"DTMF digits that will end the recording. ",(0,l.kt)("br",null),(0,l.kt)("em",{parentName:"td"},"Default ",(0,l.kt)("inlineCode",{parentName:"em"},"#*")),".")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/record_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.RecordResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Start recording audio in the call for both direction in stereo mode, if successful, grab 'url', 'duration' and 'size' from the RecordResult object.\"",title:'"Start',recording:!0,audio:!0,in:!0,the:!0,call:!0,for:!0,both:!0,direction:!0,stereo:!0,"mode,":!0,if:!0,"successful,":!0,grab:!0,"'url',":!0,"'duration'":!0,and:!0,"'size'":!0,from:!0,RecordResult:!0,'object."':!0},"<?php\n\n$params = [\n  'stereo' => true,\n  'direction' => 'both'\n];\n$call->record($params)->done(function($recordResult) {\n  if ($recordResult->isSuccessful()) {\n    $url = $recordResult->getUrl();\n    $duration = $recordResult->getDuration();\n    $size = $recordResult->getSize();\n  }\n});\n")),(0,l.kt)("h3",{id:"recordasync"},"recordAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#record"},(0,l.kt)("inlineCode",{parentName:"a"},"record")),". It does not wait the end of recording but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/record_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.RecordAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#record"},(0,l.kt)("inlineCode",{parentName:"a"},"record"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/record_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.RecordAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Start recording audio in the call for both direction in stereo mode and then stop it using the RecordAction object."',title:'"Start',recording:!0,audio:!0,in:!0,the:!0,call:!0,for:!0,both:!0,direction:!0,stereo:!0,mode:!0,and:!0,then:!0,stop:!0,it:!0,using:!0,RecordAction:!0,'object."':!0},"<?php\n\n$params = [\n  'stereo' => true,\n  'direction' => 'both'\n];\n$call->record($params)->done(function($recordAction) {\n  // For demonstration purposes only ..\n  $recordAction->stop();\n});\n")),(0,l.kt)("h3",{id:"senddigits"},"sendDigits"),(0,l.kt)("p",null,"This method sends DTMF digits to the other party on the call. Allowed digits are ",(0,l.kt)("inlineCode",{parentName:"p"},"1234567890*#ABCD")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"wW")," for short and long waits. If any invalid characters are present, the entire operation is rejected."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$digits")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"String of DTMF digits to send.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/send_digits_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.SendDigitsResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Send some digits."',title:'"Send',some:!0,'digits."':!0},"<?php\n\n$call->sendDigits('123')->done(function($result) {\n  if ($result->isSuccessful()) {\n    // ...\n  }\n});\n")),(0,l.kt)("h3",{id:"senddigitsasync"},"sendDigitsAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#senddigits"},(0,l.kt)("inlineCode",{parentName:"a"},"sendDigits")),". It does not wait for the sending event to complete, and immediately returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/send_digits_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.SendDigitsAction"))," object you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.2+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#senddigits"},(0,l.kt)("inlineCode",{parentName:"a"},"sendDigits"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/send_digits_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.SendDigitsAction")),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Send some digits and then check if the operation is completed using the SendDigitsAction object."',title:'"Send',some:!0,digits:!0,and:!0,then:!0,check:!0,if:!0,the:!0,operation:!0,is:!0,completed:!0,using:!0,SendDigitsAction:!0,'object."':!0},"<?php\n\n$call->sendDigitsAsync('123')->done(function($action) {\n  // ...\n  // Later in the code for demonstration purposes only ..\n  $completed = $action->isCompleted();\n});\n")),(0,l.kt)("h3",{id:"tap"},"tap"),(0,l.kt)("p",null,"Intercept call media and stream it to the specify endpoint. It waits until the end of the call."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"$tap")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"array")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Array with the following properties:")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"audio_direction")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"listen")," what the caller hears, ",(0,l.kt)("inlineCode",{parentName:"td"},"speak")," what the caller says or ",(0,l.kt)("inlineCode",{parentName:"td"},"both"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"target_type")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"Protocol to use: ",(0,l.kt)("inlineCode",{parentName:"td"},"rtp")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"ws"),", defaults to ",(0,l.kt)("inlineCode",{parentName:"td"},"rtp"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"target_ptime")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Packetization time in ms. It will be the same as the tapped media if not set.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"codec")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"optional-arg"},"optional")),(0,l.kt)("td",{parentName:"tr",align:null},"Codec to use. It will be the same as the tapped media if not set.")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"To ",(0,l.kt)("inlineCode",{parentName:"li"},"tap")," through RTP:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"target_addr")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"RTP IP v4 address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"target_port")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"number")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"RTP port.")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/tap_result"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.TapResult"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Tapping audio from the call, if successful, print both source and destination devices from the TapResult object."',title:'"Tapping',audio:!0,from:!0,the:!0,"call,":!0,if:!0,"successful,":!0,print:!0,both:!0,source:!0,and:!0,destination:!0,devices:!0,TapResult:!0,'object."':!0},"<?php\n\n$tap = [\n  'audio_direction' => 'both',\n  'target_type' => 'rtp',\n  'target_addr' => '192.168.1.1',\n  'target_port' => 1234\n];\n$call->tap($tap)->done(function($tapResult) {\n  if ($tapResult->isSuccessful()) {\n    print_r($tapResult->getSourceDevice());\n    print_r($tapResult->getDestinationDevice());\n  }\n});\n")),(0,l.kt)("h3",{id:"tapasync"},"tapAsync"),(0,l.kt)("p",null,"Asynchronous version of ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#tap"},(0,l.kt)("inlineCode",{parentName:"a"},"tap")),". It does not wait the end of tapping but returns a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/tap_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.TapAction"))," you can interact with."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.1+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/call#tap"},(0,l.kt)("inlineCode",{parentName:"a"},"tap"))," for the parameter list."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with a ",(0,l.kt)("a",{parentName:"p",href:"/docs/php/reference/relay_calling/tap_action"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.TapAction"))," object."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="Tapping audio from the call and then stop it using the TapAction object."',title:'"Tapping',audio:!0,from:!0,the:!0,call:!0,and:!0,then:!0,stop:!0,it:!0,using:!0,TapAction:!0,'object."':!0},"<?php\n\n$tap = [\n  'audio_direction' => 'both',\n  'target_type' => 'rtp',\n  'target_addr' => '192.168.1.1',\n  'target_port' => 1234\n];\n$call->tapAsync($tap, $device)->done(function($tapAction) {\n  // ... later in the code to stop tapping..\n  $tapAction->stop();\n});\n")),(0,l.kt)("h3",{id:"waitfor"},"waitFor"),(0,l.kt)("p",null,"Wait for specific events on the Call or returns ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," if the Call ends without getting them."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"event1, event2, ..eventN")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"method-prop-type"},"string or string[]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("span",{class:"required-arg"},"required")),(0,l.kt)("td",{parentName:"tr",align:null},"One or more ",(0,l.kt)("a",{parentName:"td",href:"#state-events"},(0,l.kt)("inlineCode",{parentName:"a"},"Relay.Calling.Call")," State Events"))))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Wait for 'ending' or 'ended' events.\"",title:'"Wait',for:!0,"'ending'":!0,or:!0,"'ended'":!0,'events."':!0},"<?php\n\n$call->waitFor('ending', 'ended')->done(function($success) {\n  if ($success) {\n    // ...\n  }\n});\n")),(0,l.kt)("h3",{id:"waitforanswered"},"waitForAnswered"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"#waitfor"},(0,l.kt)("inlineCode",{parentName:"a"},"waitFor")),". This simplifies waiting for the ",(0,l.kt)("em",{parentName:"p"},"answered")," state."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Wait for the 'answered' event.\"",title:'"Wait',for:!0,the:!0,"'answered'":!0,'event."':!0},"<?php\n\n$call->waitForAnswered()->done(function($success) {\n  if ($success) {\n    // ...\n  }\n});\n")),(0,l.kt)("h3",{id:"waitforended"},"waitForEnded"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"#waitfor"},(0,l.kt)("inlineCode",{parentName:"a"},"waitFor")),". This simplifies waiting for the ",(0,l.kt)("em",{parentName:"p"},"ended")," state."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Wait for the 'ended' event.\"",title:'"Wait',for:!0,the:!0,"'ended'":!0,'event."':!0},"<?php\n\n$call->waitForEnded()->done(function($success) {\n  if ($success) {\n    // ...\n  }\n});\n")),(0,l.kt)("h3",{id:"waitforending"},"waitForEnding"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"#waitfor"},(0,l.kt)("inlineCode",{parentName:"a"},"waitFor")),". This simplifies waiting for the ",(0,l.kt)("em",{parentName:"p"},"ending")," state."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Wait for the 'ending' event.\"",title:'"Wait',for:!0,the:!0,"'ending'":!0,'event."':!0},"<?php\n\n$call->waitForEnding()->done(function($success) {\n  if ($success) {\n    // ...\n  }\n});\n")),(0,l.kt)("h3",{id:"waitforringing"},"waitForRinging"),(0,l.kt)("p",null,"This is a helper function that refines the use of ",(0,l.kt)("a",{parentName:"p",href:"#waitfor"},(0,l.kt)("inlineCode",{parentName:"a"},"waitFor")),". This simplifies waiting for the ",(0,l.kt)("em",{parentName:"p"},"ringing")," state."),(0,l.kt)("p",null,"Available In: ",(0,l.kt)("img",{class:"method-available-tag",src:"https://img.shields.io/badge/-v2.0+-brightgreen.svg"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"None")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"React\\Promise\\Promise")," - Promise object that will be fulfilled with ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=\"Wait for 'ending' or 'ended' events.\"",title:'"Wait',for:!0,"'ending'":!0,or:!0,"'ended'":!0,'events."':!0},"<?php\n\n$call->waitForRinging()->done(function($success) {\n  if ($success) {\n    // ...\n  }\n});\n")),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("p",null,"All these events can be used to track the calls lifecycle and instruct SignalWire on what to do for each different state."),(0,l.kt)("h3",{id:"state-events"},"State Events"),(0,l.kt)("p",null,"To track the state of a call."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"stateChange")),(0,l.kt)("td",{parentName:"tr",align:null},"Event dispatched when Call state changes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"created")),(0,l.kt)("td",{parentName:"tr",align:null},"The call has been created in Relay.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"ringing")),(0,l.kt)("td",{parentName:"tr",align:null},"The call is ringing and has not yet been answered.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"answered")),(0,l.kt)("td",{parentName:"tr",align:null},"The call has been picked up.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"ending")),(0,l.kt)("td",{parentName:"tr",align:null},"The call is hanging up.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"ended")),(0,l.kt)("td",{parentName:"tr",align:null},"The call has ended.")))),(0,l.kt)("h3",{id:"connect-events"},"Connect Events"),(0,l.kt)("p",null,"To track the connect state of a call."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"connect.stateChange")),(0,l.kt)("td",{parentName:"tr",align:null},"Event dispatched when the Call ",(0,l.kt)("inlineCode",{parentName:"td"},"connect")," state changes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"connect.connecting")),(0,l.kt)("td",{parentName:"tr",align:null},"Currently calling the phone number(s) to connect.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"connect.connected")),(0,l.kt)("td",{parentName:"tr",align:null},"The calls are being connected together.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"connect.failed")),(0,l.kt)("td",{parentName:"tr",align:null},"The last call connection attempt failed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"connect.disconnected")),(0,l.kt)("td",{parentName:"tr",align:null},"The call was either never connected or the last call connection completed.")))),(0,l.kt)("h3",{id:"play-events"},"Play Events"),(0,l.kt)("p",null,"To track a playback state."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"play.stateChange")),(0,l.kt)("td",{parentName:"tr",align:null},"Event dispatched when the state of a ",(0,l.kt)("inlineCode",{parentName:"td"},"playing")," changes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"play.playing")),(0,l.kt)("td",{parentName:"tr",align:null},"A playback is playing on the call.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"play.error")),(0,l.kt)("td",{parentName:"tr",align:null},"A playback failed to start.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"play.finished")),(0,l.kt)("td",{parentName:"tr",align:null},"The playback has ended.")))),(0,l.kt)("h3",{id:"record-events"},"Record Events"),(0,l.kt)("p",null,"To track a recording state."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"record.stateChange")),(0,l.kt)("td",{parentName:"tr",align:null},"Event dispatched when the state of a ",(0,l.kt)("inlineCode",{parentName:"td"},"recording")," changes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"record.recording")),(0,l.kt)("td",{parentName:"tr",align:null},"The call is being recorded.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"record.no_input")),(0,l.kt)("td",{parentName:"tr",align:null},"The recording failed due to ",(0,l.kt)("em",{parentName:"td"},"no input"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"record.finished")),(0,l.kt)("td",{parentName:"tr",align:null},"The recording has finished.")))),(0,l.kt)("h3",{id:"prompt-events"},"Prompt Events"),(0,l.kt)("p",null,"To track a prompt state."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"prompt")),(0,l.kt)("td",{parentName:"tr",align:null},"The prompt action on the call has finished.")))),(0,l.kt)("h3",{id:"fax-events"},"Fax Events"),(0,l.kt)("p",null,"To track a fax state."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"fax.error")),(0,l.kt)("td",{parentName:"tr",align:null},"Faxing failed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"fax.finished")),(0,l.kt)("td",{parentName:"tr",align:null},"Faxing has finished.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"fax.page")),(0,l.kt)("td",{parentName:"tr",align:null},"A fax page has been sent or received.")))),(0,l.kt)("h3",{id:"detect-events"},"Detect Events"),(0,l.kt)("p",null,"To track a detector state."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"detect.error")),(0,l.kt)("td",{parentName:"tr",align:null},"The detector has failed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"detect.finished")),(0,l.kt)("td",{parentName:"tr",align:null},"The detector has finished.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"detect.update")),(0,l.kt)("td",{parentName:"tr",align:null},"There is a notification from the detector (eg: a new DTMF).")))),(0,l.kt)("h3",{id:"tap-events"},"Tap Events"),(0,l.kt)("p",null,"To track a tapping state."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"tap.tapping")),(0,l.kt)("td",{parentName:"tr",align:null},"The tap action has started on the call.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"tap.finished")),(0,l.kt)("td",{parentName:"tr",align:null},"Tap has finished.")))),(0,l.kt)("h3",{id:"digits-events"},"Digits Events"),(0,l.kt)("p",null,"To track a ",(0,l.kt)("em",{parentName:"p"},"send digits")," action state."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"sendDigits.finished")),(0,l.kt)("td",{parentName:"tr",align:null},"Digits have been sent.")))),(0,l.kt)("h2",{id:"ringtones"},"Ringtones"),(0,l.kt)("p",null,"Here you can find all the accepted values for the ringtone to play, based on short country codes:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"at, au, bg, br, be, ch, cl, cn, cz, de, dk, ee, es, fi, fr, gr, hu, il, in, it, lt, jp, mx, my, nl, no, nz, ph, pl, pt, ru, se, sg, th, uk, us, tw, ve, za"))))))}m.isMDXComponent=!0}}]);